#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
var app = require('../app');
var debug = require('debug')('charity-blockchain-be:server');
var http = require('http');
const { initP2PConnect, doA } = require('../utils/p2pUtils');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
var superNodePort = normalizePort(process.env.SUPER_NODE_PORT || '5000')
var p2pPort = normalizePort(process.env.P2P_PORT || '6000')
var uiSocketPort = normalizePort(process.env.UI_SOCKET_PORT || '7000')

app.set('port', port);
app.set('superNodePort', superNodePort);
app.set('p2pPort', p2pPort);
app.set('uiSocketPort', uiSocketPort);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Setup socket client/server
 */

//* Socket server dÃ¹ng cho P2P
var httpP2PServer = require('http').createServer();
var p2pSocketServer = require('socket.io')(httpP2PServer, {
  cors: { origin: "*" }
})



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

p2pSocketServer.on('connection', socket => {
  //init connection
  require('../utils/p2pUtils').initConnection(socket);
})

doA();



httpP2PServer.listen(p2pPort, () => console.log('App is listening on websocket - P2P port on: ' + p2pPort))
initP2PConnect(superNodePort, port)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
